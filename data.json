[
  {
    "file": "experiments/example1.js",
    "name": "Rippling Lines",
    "description": "This piece extends the original line grid by adding interactive thickness: the closer the mouse is, the thicker the line segments become. Smooth interpolation ensures flowing transitions instead of abrupt changes, creating a ripple-like effect across the canvas. To maintain visual balance, the interaction range and maximum thickness are limited, avoiding overwhelming distortions."
  },
    {
    "file": "experiments/example2.js",
    "name": "Sliding Pearls",
    "description": "This piece shows a grid of horizontal lines that can be rotated interactively using a slider. Pearls appear when the mouse hovers near a line and start drifting along the rotation direction, giving the illusion of flowing motion. To keep the composition clear, pearls are removed once they leave the bounds of the rotated field."
  },
    {
    "file": "experiments/example3.js",
    "name": "Rotating Grid",
    "description": "This piece shows an 8×8 grid of colorful boxes that react to mouse interaction. When hovered, each box smoothly rotates to a unique maximum angle depending on its row, then slowly resets after a delay. The variation in timing and rotation creates a dynamic, wave-like effect across the grid."
  },
    {
    "file": "experiments/example4.js",
    "name": "Returning Grid",
    "description": "This piese shows a grid of colored boxes, each starting with a unique rotation based on its row. When the mouse hovers over a box, it smoothly rotates back to a neutral angle, then after a delay returns to its original tilted state. The interaction produces a rhythmic and wave-like effect across the grid, with each column responding at different times."
  },
    {
    "file": "experiments/example5.js",
    "name": "Interactive Flowfield Particles",
    "description": "This piece simulates a dynamic flowfield populated by agents represented as arrows, which move according to local vector directions. A live webcam feed and hand tracking via ml5.js's handpose model allow users to interact with the flowfield in real-time. Closing the hand locally influences the vector field, causing agents to respond and change their directions. The artwork was implemented using example code for flowfields and hand tracking as a foundation."
  },
      {
    "file": "experiments/example6.js",
    "name": "Interactive Flowfield Trails",
    "description": "This piece visualizes a set of agents leaving colorful trails as they follow a procedurally generated flowfield. Real-time hand tracking via webcam (ml5.js handpose) allows viewers to manipulate the flowfield, subtly altering the movement patterns of the agents. The implementation builds upon example code for flowfields and hand tracking, enhanced with dynamic color trails to create a visually engaging effect."
  },
    {
    "file": "experiments/example7.js",
    "name": "Interactive Flowfield with Harmonic Sound",
    "description": "In this piece, I extended my interactive flowfield by adding sound, mapping the agents’ movement directions to a pentatonic scale for a naturally harmonic result. To keep the soundscape pleasant and avoid chaos, I limited the number of sound-emitting boids and used a simple sine synth for a soft timbre. The main idea was to combine visuals and audio interactively, but with restrictions that ensured clarity and harmony instead of noise."
  }
]
